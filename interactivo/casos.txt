Casos probados:

Props p, q.

Casos con existenciales:
- Theorem t1: (forall x, x -> x) -> (exists x, x -> x) -> (exists w, w -> w).
Para chequear que el para todo unifica con el existe.
- Theorem t2: p -> (exists x, p -> x) -> (exists y, y).
Para chequear eliminación de existe, y el inferidor.
- Theorem t3: (exists y, forall x, x -> y) -> (forall x, exists y, x -> y).
Para chequear eliminación de existe. NO chequee el lambda termino.
- Theorem t44: (forall x, exists y, y /\ x \/ exists k, x) -> forall t, exists q, q /\ (t -> q) \/ exists m, (t -> m).
Para chequear la unificación cuando hay exists.


Casos sin existenciales:
- Theorem t4: (forall x, forall y, forall z, y -> y) -> (p -> p).
Para ver que los tipos "vacios" se instancian correctamente.
- Theorem t5: (forall a, (forall c, a)  -> (forall c, a)) -> (forall c, p) -> (forall c, p).
Arreglado. Cambiamos la forma con que se añadían las susbtituciones a la estructura Map.
- Theorem t6: (forall a, forall b, a -> b) -> p -> q.
Arreglado. Se Generaba un lambda término con las instancias al reves. La solución es es la misma
del teorema t5.
- Theorem t7: forall as, forall we, as -> (forall jk, jk) -> we.
Para chequear que se imprima bien el lambda término.
- Theorem t8 : (forall qw, qw /\ qw) -> forall nm, nm /\ nm.
Para chequear que se imprima bien el lambda término.
- Theorem t9 : p -> q -> (p /\ (p /\ q)) /\ q.
Para chequear que funcione bien el algoritmo que maneja la construcción de las subpruebas.
- Props p q r t y.
  Theorem t10: p -> q -> r -> t -> (p -> q -> r -> t -> y) -> y.
Para chequear el pretty printer de las subpruebas, con el nuevo algoritmo.
¿Qué hacer cuando variable de tipo es el igual a variable de término? NO hay problema.
- Theorem t11: (forall b, (forall a, a) -> (forall w, forall r, b) -> b) -> 
    (forall o, forall w, (forall x, x) -> (forall dd, forall ee, (forall zz, o)) -> (forall kk, o)).
Para probar la unificación y el pretty printer.
- Theorem t12: forall a, forall b, (a -> b) -> (forall c, forall d, a -> b).
Para probar el comando apply.
- Theorem t13: forall o, (forall b, (forall a, a) -> (forall c, forall d, b) -> b) -> (forall a, a) -> (forall w, forall r, (forall t, o /\ t)) -> (forall t, o /\ t).
Para probar la unificación.
- Theorem t14: forall d, (forall a, a -> d)-> forall b, forall c, b -> d.
Para probar la unificación.
- Theorem t15: forall b, forall c, (forall a, a -> c) -> b -> c.
Para probar la unificación.
-Theorem t16: forall b, forall c, (forall a, a -> c) -> forall qq, (forall h, h -> c).
Para probar la unificación.
- Theorem tt17 : forall a, forall b, a /\ b -> a.
  Theorem tt17' : forall p, forall q, forall r, p /\ q -> (p -> r) -> r.
Para probar el comando exact en la prueba de tt17', de la siguiente manera:
exact (H1 (tt17 [p] [q] H0)).
- Theorem t18: (forall x, forall y, forall z, x -> z) -> (forall x, forall z, x -> z). 
Para chequear si podemos instanciar el tipo "vacio", mediante "exact".
- Definition x <--> y := (x -> y) /\ (y -> x).
  Theorem t19: forall x, forall y, x /\ y -> x <--> y.
  Theorem t20: forall g, forall w, (g <--> w) -> (g -> w).
Para chequear la definición de operandos.
- Definition x -- y := forall w, (w /\ x) /\ y -> w.
  Theorem t21: forall w, forall p, w -> p -> (forall p, p /\ w \/ w) -- (forall w, forall p, w /\ p).
Para chequear el renombre de variables de tipo ligadas en el unfold.
- Definition x ^ y := forall w, forall v, x /\ y /\ w \/ v -> x /\ y.
  Theorem t22: forall w, forall v, w -> v -> w ^ (forall v, forall w, v -> w).
Para chequear el renombre de variables de tipo ligadas en el unfold.
- Theorem t23: forall o, forall t, (forall w,  forall r, o /\ w) -> (o /\ t).
Para chequear la unificación (este caso no unificaba y lo arregle).
- Theorem t24: p -> q -> (((p /\ q) /\ (p /\ p)) /\ q) /\ p.
Para chequear el pretty printer de la prueba, y el inferidor sobre el lambda término de la prueba.
- Definition x x y := forall w, forall v, x /\ y.
  Theorem t25 : forall w, forall y, x w y -> x w y.
Para probar el parseo (antes no se parseaba bien).
- Theorem t26: forall w, forall y,  w /\ y -> w \/ y.
Para probar que puede inferirse el tipo del lambda término asociado
- Theorem t27: p -> p <-> p -> p.
Para probar el pretty printer (precedencias).
- Definition fun1 w := forall x, w -> x -> w.
  Definition fun2 w := forall x, w -> x -> x -> w.
  Theorem t28:fun1 (fun2 p).
Para probar el pretty printer (precedencias).
- Theorem t29: p -> p \/ p /\ p \/ q.
Para probar el pretty printer (precedencias).
- Theorem t30: p -- q ^ q -- p.
Para probar el pretty printer (precedencias).
- Definition q ++ k := forall x, x -> q -> q.
  Theorem t31: p -- q ^ q -- p ++ q.
Para probar el pretty printer (precedencias).
- Theorem t32: (p -- q ^ q -- p) ^ (q ++ q) ^ p.
Para probar el pretty printer (precedencias).
- Theorem t33: ~p \/ fun1 p.
Para probar el pretty printer (precedencias), y el inferidor de tipos.
- Theorem t34: forall x, x -> x /\ (x <-> x).
Para probar el inferidor de tipos.
- Theorem t35: False -> ~p.
Para probar la táctica de eliminación del bottom.
- Definition fun3 w y := forall x, w -> x -> y -> w.
  Theorem t36: fun3 p q -> fun2 q.
Para probar el pretty printer (precedencias).
- Theorem k37: fun1 p /\ (p -> p).
Para probar el pretty printer (precedencias).
- Theorem k38: forall bb, forall aa, aa -> (forall aa0, aa0 -> aa).
Probar con "intro" y "exact (\aa.\x:aa.\aa.\y:aa.x) as forall bb, bb -> (forall cc, cc -> bb)".
Para chequear el renombramiento de var. de tipo en el lambda término final.
- Theorem k39: forall x, forall y, (x -> ~y) -> y -> x -> ~x.
Para probar "cut" y "absurd".
- Theorem k40: forall x, forall y, x -> y -> (forall x, forall y, x /\ y -> x \/ y) -> x \/ y.
Para probar "cut x /\ y".
- Definition fun3 x := ~x /\ (forall x, x).
  Theorem k41: forall x, fun3 x -> x -> x \/ ~x.
Para probar "cut False", o "unfold fun3 in H0".
- Definition op x := forall y, y -> x.
  Theorem k42: False -> op (forall y, y) -> forall y0, y0 -> False.
Para probar el parser (Antes NO funcionaba).
- Definition x $ y := forall w, (w /\ x) /\ y -> w.
  Theorem t43: forall w, forall p, w -> forall p, p $ w -- forall w, forall p, w /\ p.
Para probar el parser, con "para todo" sin paréntesis (NO se probó su veracidad).
- Theorem t45: forall t, forall g, (forall x, forall y, exists z, z /\ x \/ ~exists k, k -> y) -> exists q, q /\ (t -> g) \/ ~exists m, m -> g -> t.
Para probar el parser, y el inferidor.
- Theorem t46: (forall w, forall d, forall a, a -> d)-> forall b, forall c, b -> c.
Para probar la unificación, donde hay que ingregar un tipo mediante exact.
- Theorem t47: forall p, forall q, p -> q -> ((forall x, x -> x) /\ (forall w, w -> w)) /\ forall k, p /\ q.
Para chequear el comando "exact" con "as".
Hice: intros; split; split; exact (\a. \x:a. x) as forall ww, ww -> ww; exact (\q. \y:q. y) as forall kk, kk -> kk; exact (\z. intro_and [p] [q] H0 H1) as forall mm, p /\ q.
- Algo = forall w, w \/ w.
  Theorem t48: forall k, ~ Algo /\ Algo -> k.
Para probar el parser, y chequear que se efectue correctamente la transformación del tipo con nombre a uno sin nombre.
- x x x = forall w, forall v, x /\ v.
  jojo x x = forall w, forall v, x /\ v.
  Theorem t49: forall m, jojo m (~m) -> False.
NO se probo. Para chequear definición de operadores. 
- op = forall w, w -> w.
  Theorem t50: op -> forall op, op -> op.
Para chequear el renombre de variables ligadas.
- Theorem t51: forall w, forall w, w -> w.
Lo resuelvo con: intro; exact (\h.\x:h.x).
Para probar el exact, y el inferidor.
- (Props p, q.)
  op x = forall q, x -> q.
  Theorem t52: forall q, op q.
Para chequear el renombramiento cuando se hace "unfold op".
- cc = forall qq, qq -> qq.
 Theorem t52: forall qq, qq -> cc.
Para chequear el renombramiento con "unfold cc".
- qq = forall t, t -> t /\ t.
  Theorem t53: qq -> cc.
Para chequear el renombramiento con "unfold cc".
- H = \a.\x:a.x.
  H0 = \a.\x:a.x.
  Theorem t54: forall p, forall q, p -> p.
Chequemos que los nombres de los hipótesis NO coincidan con los nombres de los teoremas.
- qqq = \t.\x:t.intro_and [t] [t] x x.
  Theorem t55: forall w, w -> (w /\ w) /\ (w -> w).
Para chequear el exact sobre una definición de término.
La prueba es: intros; exact (intro_and [w /\ w] [w -> w] (qqq [w] H0) (\f:w.f)).


Casos de inferencia OK:
1. infer \A. \B. \x:A. \y:False. let {B,x} = {*B, \B.\x:False. x} as exists A, forall Q, False -> False in (\C. x [False] y) [B].
2. infer \A.\B.let {W,x} = {*A, \C.\y:B. y} as exists A, forall R, B -> B in x.
3. infer \a.\b.\x:a->b.\c.\y:a->c.\d.\z:a->b.y.
4. infer \a.\b.\w:a->b.(\c.\x:a->c.\d.\y:forall o, d->c. y [d]) [a].
5. infer \a.\b. \x:forall a, a -> a. \y: forall q, q. x [a] (y [a]).
Para chequear el pretty printer.
6. infer \A.\B.\x:(B -> (forall A, B -> B)). \y:B. x y [A] y.
Para chequear el pretty printer.
7. infer \x:forall w, False -> w.\a.\b.{*forall a0, forall b0, forall c, c -> a0, \c.x [forall a0, forall b0, forall c0, c0 -> a0]} as exists x, forall c, False -> x.
8. infer \p.{*p, \w.\x:p.x} as exists x, forall w, p -> x.
9. infer (\A. \x:A. \y: A -> forall B, A. y as (A -> forall W, A) x as A [A]) as forall B, B -> (B -> forall C, B) -> B.
Para probar precedencia del "as".
10. infer (\A. \x:forall B, A. \y: A -> A. y as (A -> A) (x as (forall C, A) [A])) as forall B, (forall C, B) -> (B -> B) -> B.
Para probar precedencia del "as".
11. Check (\qq.\x:qq.x) as (forall p, p -> p).
12. Check (\a.\a.\x:a.x) as (forall a, forall a, a -> a).
13. Check (\a.\b.\x:b.\y:a.y) [forall b, b -> b].
Notamos que no se renombran las variables ligadas del tipo que se utiliza en una substitución (esta bien, no es necesario).

Casos de inferencia ERROR:
1. infer \B. let {A,a} = {*B, \x:B.x} as exists C, C -> C in a.
2. infer \a.\x:a.\a.\b.\y:a->b. y x.
3. Check (\a.\x:a.\a.\y:a -> a.y x) as (forall a, a -> forall a, (a -> a) -> a).


Definiciones:
1. CBool = forall X, X -> X -> X.
   CBool2 = forall X, X -> X -> X.
   tru = (\X. \t:X. \f:X. t) as CBool.
   tutu = (\X. \t:X. \f:X. f) as CBool2.
   t1 = \f:CBool -> CBool -> CBool2. f tru tutu.
2. n2 = (\a.\x:a.x) as forall gg, gg -> gg.
Para probar "Check n2".
3. Theorem H:forall w, w -> w.
   Propositions p, q.
   algo = jojo H q.
Chequear el error.

   TERMINAR de ver:
Ver caso de CBool y CBool2, en test.f
