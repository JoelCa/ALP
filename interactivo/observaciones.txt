Dependencias
------------

cabal install mtl
cabal install exceptions
cabal install vector
cabal install megaparsec

Usaba megaparsec-5.3.1.
Ahora uso megaparsec-6.0.2

Dato de la instalación de la libreria ncurses en Debian:
Una vez instalada ncurses, tuve que crear un enlace simbólico: libtinfo.so -> libtinfo.so.5
root@joel:/lib/x86_64-linux-gnu# ln -s libtinfo.so.5 libtinfo.so
Para ejecutar mi programa, sin ello daba error.

Además es necesario tener el paquete containers con una versión superior o igual a la 0.5.8 


Observaciones
-------------

- El caracter "\", se identifica con el char '\\'.
CUIDADO!. Si se quiere probar el parser por el interprete hacer "\\" en lugar de "\".
Ej: getCommand ("Theorem a : a /\\ a.") []

- (YA NO VALE, arreglado) Emplee unificación de solo un nivel, por ejemplo esto no se puede probar:
  Theorem qqq: p->(forall p, forall p, p) -> forall p, p.

- Problema dado por Mauro en agda: ~(A <-> ~A)
Resuelto en Coq.

Theorem paradox: ~(A <-> ~A).
Proof.
  unfold iff, not.
  intros.
  elim H.
  intros;
  apply H0;
  apply H1;
  intro;
  apply H0;
  assumption;
  assumption.
Qed.

- YA NO VALE. Cuando se aplica la introducción del "para todo" sobre la variable de tipo "x", se reemplaza
en el tipo sin nombre el término "TBound 0" por "TFree x". Es util cuando se comparan tipos
en el comando "assumption".


- El lambda término final tiene un tipo alpha equivalente al dado por el usuario.
Por ejemplo, si el tipo es: (forall k, k -> k) -> (forall j, j) -> (forall y, y).
Se tiene el lambda término \x:(forall k, k -> k).x (forall j, j), el cual tendría tipo
(forall k, k -> k) -> (forall j, j) -> (forall j, j)

- Definimos cada una de la reglas de la semántica de tipos del sistema F, mediante términos con aujeros.
De modo tal que sucesivas aplicaciones de los axiomas terminen de armar el lambda término que cumpla
con el tipo deseado. 
Sabemos que el sistema F, permite la abstracción tanto términos como tipos. Así podemos definir nuevos 
constructores de tipos, a partir del lenguaje, sin necesidad de incoorporarlo ad hoc.
Hacemos uso del poder expresivo del sistema F, definiendo los tipos (u operadores lógicos) "and" y "or",
en término de los tipos del sistema F.

- ¿Por qué es necesario declarar las proposiciones (o variables de tipo)?. Lo hacemos para tener un
un mejor algoritmo de reescritura de variables de tipos ligadas sobre el tipo que da el usuario.

- Aquellas variables de tipo que declaramos, mediante el comando "Props", aparecen como variables
de tipo libre en el lambda término que las utiliza.

- La unificación, con el comando "apply", sobre una variable de término H, trata de unificar 
todos los "para todos" seguidos más externos de H. En algunos casos, basta con encontrar la 
unificación solo para algunos "para todos".

- Utilizé las estructuras de datos Map y Seq.

- Utilizé el tipo de datos Doc, como pretty printer.

- Tanto "~" como "<->", están definidos de manera "hardcode".

- Los operadores pueden identificarse de dos formas:
1. Alfanuméricamente. Es este caso el operador por default es prefix.
Se usa `id` para que sea prefix.
2. Simbólicamente. Por default es prefix. Se usar (id), para que sea prefix.
Gramática de símbolos:
symbol  ->  ascSymbol | uniSymbol<special | _ | : | " | '>
ascSymbol ->  ! | # | $ | % | & | * | + | . | / | < | = | > | ? | @
  |   \ | ^ | | | - | ~
uniSymbol ->  any Unicode symbol or punctuation 

- Funcionamiento del algoritmo que controla la eliminación y creación de subpruebas.
Cuando se crean n subpruebas, con n > 1, que le corresponden los tipos t_1, .., t_n.
A la cabeza de la lista de subpruebas (subps), p_h, se le asignan los tipos t_2, ..., t_n.
Además, se añade una nueva prueba p_1 con el tipo t_1.

Cuando la prueba que se encuentra a la cabeza de la lista subps, p_1, termina, puede suceder
dos cosas. Consideramos a p_t como la cola de subps.
1. Si p_t = [], no hay más subpruebas.
2. Si no p_t = p_h : p_t'.Luego, se extrae p_1 de subps, y pueden suceder dos cosas:
 1. Si p_h tiene asignado un solo tipo, no se hace nada.
 2. Si p_h tiene los tipos t_1, .. t_2, se quita t_1 de los tipos asignados a p_h, 
y se añade una nueva prueba p_2 con el tipo t1.

- (ARREGLADO) Funciona mal el inferidor de tipos, pues no renombra los tipos con nombres (withoutName).
Ejemplo: infer \aa.\x:aa.\aa.\y:aa.x.
Ver k14, en plantilla_p2.v

- Se renombran las variables de tipos de los lambda términos a los que les aplica el comando infer,
de modo tal de que se respete la siguiente convención.
Convención: Cada abstracción de tipo (con la forma "\a.") debe ser diferente.
En la implementación, incluso renombramos las variables de tipo ligadas (correspondiente a "forall x, .."),
de modo tal de que cada una sea distinta de las que fueron declaradas previamente.

- NO VALE. Transformo Seq en Listas mediante la función foldr, en las funciones: applyTypes, withoutName, y getRenamedType.

- NO se admite la utilización del comando de definición de términos o tipos, durante una prueba.

- Consideramos que dos tipos son iguales si sus tipos sin nombres son iguales.
Como consecuencia de esto, un lambda término tiene infinitos tipos.
Por ejemplo, (\x:forall w,w.x) : ((forall w,w) -> forall w,w), y también
(\x:forall w,w.x) : ((forall w,w) -> forall k,k).

- Gracias al renombramiento, NO puede producirse el "encapsulamiento" de variables.
Es decir que, por la substitución, variables libres en un tipo pasen a estar ligadas.
Ejemplo:
> infer \w.(\a.\x:forall w, a. x) [w -> w].
Se renombra a: \w.(\a.\x:forall w0, a.x) [w -> w]
El tipo "forall w, a", es renombrado a "forall w0, a", de modo tal que
al calcular "(forall w0, a)[a := w -> w]", no hay variables ligadas a "w0". 

- NO podemos expresar la regla de introducción del existe de la misma forma que hicimos con los
otros operadores. Pues requerimos del encapsulamiento para construirla.
Podriamos expresar una parte de la regla de esta forma:
\s'. \t. \y. \f:forall x, t -> y. f [s']
Sin embargo, para cualquier instancia t0 de t, "x" NO aparece en t0 (por el renombramiento). 
Es decir, t0 [x := w] = t0.

- Los lambda términos pueden tener variables libres, las cuales solo pueden ser nombres
de teoremas.

- ARREGLAR. Consideramos que en el lambda término ingresado por el usuario, los nombres de las variables de términos
pueden coincidir con los teoremas. Es decir, que en este caso NO la renombramos.

- Consideramos que ninguna definición (de tipo o de lambda término), puede ser recursiva.

- Cuando utilizamos megaparsec, y falla, entonces nos devuelvo el error de aquel parser con el que falló "menos".
Por ejemplo,
prueba = p1 <|> p2 <|> p3
Si "prueba" falla, y p2 es el parser que tuvo más exito (alcanzo a parser más que los otros),
entonces, veremos el error asociado a p2.

- Podemos escribir la entrada utilizando la mínima cantidad de espacios necesarios.
Lo mismo ocurre en Coq.
Por ejemplo, Theorem t:forall w, w\/w.

- Una vez que una prueba comienza, NO es posible aplicar el comando de definición de tipos,
ni de términos, ni tampoco se puede declarar variables de tipos. En Coq es posible
Además, cuando no se construye una prueba, NO se pueden invocar tácticas. En Coq sí se puede.

- A la hora de imprimir un lambda término, hacemos que las variables de términos ligadas sean
distintas a las variables de tipo ligadas (no tenemos en cuenta a las variables que se declaran
en los tipos), para que sea más facil de entender al lambda término imprimido.
Además, NO renombramos las variables de tipo ligadas. Por ello, se pueden dar esta situación:
> Theorem x: forall w, w -> w.
> algo = \x.\z:x.x.
> Print algo.
(\x. \y:x. x) as (forall x, x -> (forall w, w -> w))
Donde, la variable de tipo ligada "x", coincide con la variable de término "x".

FALTA:
- Chequear el parser de las hipotesis.
- Chequear que el parser "prefixOps" funcione BIEN.
- Añadir renombre de variables de tipos ligadas a los tipos, de modo tal de que no coincidan con los nombre
de teoremas probados.
- En el pretty printer de un lambda término sin nombre, hacer que las variables de términos ligadas sean
distintas a las variables de tipo libre y nombres de operadores.
- Ver constantes.
- Explicar en el informe el renombre de lambda términos (tanto de var. de tipos, como de términos).
- Mejorar Print (Print All, Print de tipos)
- Crea una estructura de tipos de términos, con y sin nombre.
